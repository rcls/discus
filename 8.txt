R-M code has only one conditional return - can get rid of them.
Then instruction-fetch can fully run ahead of exec.

Registers:
A, X, Y, U - normal.
K - prefix insn result.


Buses
 - V operand / address
 - B mem read
 - mem write (A,A# off CPU).
A - accumulator, memory write, differential, strong drive.
B - second operand, memory address, differential, strong, non-overlap.
Q - operation result, open drain.
P - program counter, differential, strong drive.
O - opcode fetch, positive logic open drain.
I - instruction executing, differential.

A0..7 & # : Accumulator value.
B0#..B7# : Operand (B-input to ALU).
Q : Instruction result, open drain.

P0..P7 & # : Program counter.
O0..O7 : Opcode (from ROM).
I0..I7 & # : Opcode (1 cycle delay from ROM).

ϕ0, ϕ1 : Clocks : Rising edge ϕ0 is main clock, rising edge active, ϕ1 only used
for memory strobing.  C0, C1 : Clock source input.

FC : Carry flag out.
FZ : Zero flag out.
STA# : Store to memory (internal link).
MR : Memory read strobe.
MW : Memory write strobe to RAM (synchronous to clock).


00XXXXXX - data prefix (load immediate register).
  * any other instruction clears data prefix.

00LCCCxx - with prefix, jump, opt link.

CCC = 000 : always
CCC = 001 : never
CCC = 010 : always
CCC = 011 : never
CCC = 100 : z
CCC = 101 : nz
CCC = 110 : c
CCC = 111 : nc

A : 00
X : 01
Y : 10
U : 11
K: 100


Decode signals...

AR#
AS
CS#
CR
[also CinS#, CinR...]XF
N
C-latch
VK - V taken from K (i.e., previous ins was constant).
BV - B# taken from V bus (i.e., not memory read, i2#).
AND
OR

N - high only for SUB, SBC and CMP
OR - high only for OR
AND - high only for AND

C - high for AND, low for OR, XOR...

Cin - force high for AND, SUB, CMP, INC
 - force low for ADD, DEC, OR, XOR

straight though:
Either ADD, OR, XOR with A=0, [CR don't care for ADD].
Or AND with A=255.

FIXME : ROM uses PNP on SEL#, RAM uses P-channel .... which is better?


================== Pure risc =============================

00nnnnnn - const
00scccrr - jmp/call [const is modal so may as well do this.]

0101..rr - STA
0100..rr - OUT

011ccc.. - rets (+2 or 3 ret never)
011001rr - CMP (C,Z) - matches SUB on 432
011011rr [also do whatever the other ret-never gives us.]



100aaarr - arith
...000 - ADD
...001 - SUB
...010 - OR, clears carry.
...011 - AND, sets carry.
...100 - ADC
...101 - SBC
...110 - XOR - force carry off.  (Or flip both.)
...111 - don't care, aliases AND (was cmp)

101.11rr - MEM (prefix)
101.0... - IN - prefix.

11dd00rr - INC (Z)
11dd01rr - DEC (Z) (match sub, cmp)
11dd10rr - MV (implement as OR 0 or ADD 0)
11dd11rr - LOAD

Memory (strobe memory, strong drives).
101x11
11xx11
010x11 is write strobe, or just use 010

Writes any reg: 00 (not jump), 1, i.e., 1 or x0 not jump

Assigns C: 100, 011001
Assigns Z: 100, 11xx0, x11001

Q from alu: 100, INC/DEC/MV (11xx10)
100
11..0x
11..x0

Writes DD 11
Writes K  00 (not jump), x01 (harmless to include jump)

ALU disable: 0, 11xx11

100 - write A
101, 00nJ - write K
11  - write DD.

W2 : 1 if:
not writing anything (0...) or writing K

W1 :
0 if writing A (10)
1 if not writing
I5 bit otherwise.

W0 : I4 and not writing A (10)

A-forced-to-1 for 11xxx1
A-forced-to-0 for 11xxx0
(dont care for 11xx11)

carry forcing & Q negation follows AAA except for 1011 (MV) & INC, DEC.
need to make 11..10 preserve B

C force0
....10
C force1
....11

Cin force0
nn.0x0
nn.x10
11..x1
11..1x
Cin force 1
nn.0x1
11..00
Cin force, except on ADC/SBC:
10010x
101 is don't care (IN,MEM)....
so 10.10 is usable.


EA force
11....
EA force 0
11..x0
EA force 1
11..x1

And
....11
Or
....10

N
nn.001
nn.101
nn.111 is don't care.
use nn..01

also...
11..00 - inc
11..01 - dec
11..10 - move, implement as "or zero"

W bits...
RR -> 0RR
writeK  -> 10x
nowrite -> 11x

C write
100.....
0110x1..

Z write
C write or 11..0

QE - insns that use ALU Q.
1.0
11.0

QK - constant prefix
00

ADD - Cin0
ADC - .
OR  - Cin0,C0
XOR - Cin0,C0
INC - Cin0