registers

SS/RR registers:
A
W
X
Y

Buses
 - V operand / address
 - B mem read
 - mem write

V bus - complementary signalling, flip-flop driven, active LOW.
 (address decodes will have CMOS inverters to drive the fan-out...)
B bus - open drain
mem write - needs write strobe (clock phase 2).


source bus is register or constant.  Memory address is always source bus.
operand bus is source bus direct or memory lookup
result bus is ALU output, or operand bus direct (add 0...)

00XXXXXX - data prefix (load immediate register).
  * any other instruction clears data prefix.

00LCCCXX - with prefix, jump, opt link.
  [prob have space to use 01 & get RR...]

[All we get from this 01 instead of 00 is indirects & ret...  and make others
 more packed.  Instead Separate uncond jumps that may be indirect?]
01LCCCRR - jump/call except:
011CCC11 - return (only with no prefix, with prefix is call).

10AAAMRR - ins that r/w A. (flags Z C O?)
  * 7 basic operations:
     add(c) sub(c) or and xor
  * also possibly cmp or sta?
  * probably don't need sub...

110WWMRR - operand to reg WW.

+ could save space on inc/dec decode if we did ww=op +/- 1.
+ have space for it with compressed jumps...

111 : misc crap:
  on all regs: inc, dec
  111000RR : inc. (flags Z)
  111010RR : dec.

  111100RR : in - only need in(a).
  111110RR : out - only need out(a), but can use full bus....

  111001RR : sta

  111011xx :
  111101xx :
  111111xx :

Not necessary:
     setc
     clrc (if or/and/xor have both clear and set c).
     shr
     ror
     not
     neg



00 - prefix or jmp/call constant. (Inc. uncond.)
00LCCCxx - jmp or call.
01AAAMRR - ops that r/w A.
100WWMRR - Load WW = src, no flags.
101WWMRR - WW = src+1, flag Z.
110WWMRR - WW = src-1, flag Z.
111xxxxx - special, no flags.
111CCC00 - ret.
111UUURR - sta, UUU is never cond. (but might as well be in normal ops...)

in/out : 111VVVRR, VVV is also never cond, make WW/RR magically match A...
No real constraints on reg numbers...

CCC = 000 : always
CCC = 001 : never
CCC = 010 : z
CCC = 011 : nz
CCC = 100 : c
CCC = 101 : nc
CCC = 110 : always
CCC = 111 : never

111001xx - sta.

11111111 - out
11111100 - in

cmp : 11111mrr
in/out is an ALU ins?


A : 11
X : 00
Y : 01
U : 10

01xxxxxx : write A
(100/101/110)WWxxx : write WW.


slice to do:
v constant is always from latch, interface for that?

Out can just use V or B bus. (V->Out, In->B?)

constant latch 0,1 also can serve for reg write address latch.

Put the VR strobe into the read-select strobes (push-pull)?

Fixme - Z flag...
