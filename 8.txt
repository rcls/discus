registers

SS/RR registers:
A
W
X
Y

Buses
 - operand / address
 - mem read
 - alu out
 - mem write

Operand bus is also address bus.



memory connector (32 bytes):
8 w1
8 w0
8 r
8 row sel
4 col sel
= 36 .... so a 40 pin connector (1mm one sided? or even 2.54mm?)

source bus is register or constant.  Memory address is always source bus.
operand bus is source bus direct or memory lookup
result bus is ALU output, or operand bus direct (add 0...)

00XXXXXX - data prefix (load immediate register).
  * any other instruction clears data prefix.

00LCCCXX - with prefix, jump, opt link.
  [prob have space to use 01 & get RR...]

[All we get from this 01 instead of 00 is indirects & ret...  and make others
 more packed.  Instead Separate uncond jumps that may be indirect?]
01LCCCRR - jump/call except:
011CCC11 - return (only with no prefix, with prefix is call).

10AAAMRR - ins that r/w A. (flags Z C O?)
  * 7 basic operations:
     add(c) sub(c) or and xor
  * also possibly cmp or sta?
  * probably don't need sub...

110WWMRR - operand to reg WW.

+ could save space on inc/dec decode if we did ww=op +/- 1.
+ have space for it with compressed jumps...

111 : misc crap:
  on all regs: inc, dec
  111000RR : inc. (flags Z)
  111010RR : dec.

  111100RR : in - only need in(a).
  111110RR : out - only need out(a), but can use full bus....

  111001RR : sta

  111011xx :
  111101xx :
  111111xx :

Not necessary:
     setc
     clrc (if or/and/xor have both clear and set c).
     shr
     ror
     not
     neg



00 - prefix or jmp/call constant. (Inc. uncond.)
00LCCCxx - jmp or call.
01AAAMRR - ops that r/w A.
100WWMRR - Load WW = src, no flags.
101WWMRR - WW = src+1, flag Z.
110WWMRR - WW = src-1, flag Z.
111xxxxx - special, no flags.
111CCC00 - ret.
111UUURR - sta, UUU is never cond. (but might as well be in normal ops...)
[Make 111 dec and 110 special?]

in/out : 111VVVRR, VVV is also never cond, make WW/RR magically match A...
No real constraints on reg numbers...

CCC = 000 : always
CCC = 001 : never
CCC = 010 : z
CCC = 011 : nz
CCC = 100 : c
CCC = 101 : nc
CCC = 110 : always
CCC = 111 : never

111001xx - sta.

11111111 - out
11111100 - in

Could do single in/out:
11111mrr


A : 11
X : 00
Y : 01
U : 10

01xxxxxx : write A
(100/101/110)WWxxx : write WW.
