registers

SS/RR registers:
A
W
X
Y

Buses
 - V operand / address
 - B mem read
 - mem write

V bus - complementary signalling, flip-flop driven, active LOW.
 (address decodes will have CMOS inverters to drive the fan-out...)
B bus - open drain
mem write - needs write strobe (clock phase 2).


source bus is register or constant.  Memory address is always source bus.
operand bus is source bus direct or memory lookup
result bus is ALU output, or operand bus direct (add 0...)

00XXXXXX - data prefix (load immediate register).
  * any other instruction clears data prefix.

00LCCCXX - with prefix, jump, opt link.
  [prob have space to use 01 & get RR...]

[All we get from this 01 instead of 00 is indirects & ret...  and make others
 more packed.  Instead Separate uncond jumps that may be indirect?]
01LCCCRR - jump/call except:
011CCC11 - return (only with no prefix, with prefix is call).

10AAAMRR - ins that r/w A. (flags Z C O?)
  * 7 basic operations:
     add(c) sub(c) or and xor
  * also possibly cmp or sta?
  * probably don't need sub...

110WWMRR - operand to reg WW.

+ could save space on inc/dec decode if we did ww=op +/- 1.
+ have space for it with compressed jumps...

111 : misc crap:
  on all regs: inc, dec
  111000RR : inc. (flags Z)
  111010RR : dec.

  111100RR : in - only need in(a).
  111110RR : out - only need out(a), but can use full bus....

  111001RR : sta

  111011xx :
  111101xx :
  111111xx :

Not necessary:
     setc
     clrc (if or/and/xor have both clear and set c).
     shr
     ror
     not
     neg



00 - prefix or jmp/call constant. (Inc. uncond.)
00LCCCxx - call(L=0) or jmp(L=1).
01AAAMRR - ops that r/w A.
100WWMRR - Load WW = src, no flags.
101WWMRR - WW = src+1, flag Z.
110WWMRR - WW = src-1, flag Z.
111xxxxx - special, no flags.
111CCC00 - ret.
111UUURR - sta, UUU is never cond. (but might as well be in normal ops...)

in/out : 111VVVRR, VVV is also never cond, make WW/RR magically match A...
No real constraints on reg numbers...

AAA = 000 : add
AAA = 001 : adc
AAA = 010 : sub
AAA = 011 : sbc
AAA = 100 : xor
AAA = 101 : or
AAA = 110 : cmp
AAA = 111 : and


CCC = 000 : always
CCC = 001 : never
CCC = 010 : never
CCC = 011 : never
CCC = 100 : c
CCC = 101 : nc
CCC = 110 : z
CCC = 111 : nz

111010xx - sta.

11101011 - out
11101000 - in


in/out is an ALU ins?


A : 11
X : 00
Y : 01
U : 10

01xxxxxx : write A
(100/101/110)WWxxx : write WW.


slice to do:
v constant is always from latch, interface for that?

Out can just use V or B bus. (V->Out, In->B?)

constant latch 0,1 also can serve for reg write address latch.

Put the VR strobe into the read-select strobes (push-pull)?

Fixme - Z flag...


Decode signals...

AR#
AS
CS#
CR
[also CinS#, CinR...]XF
N
C-latch
VK
BV
AND
OR

O4# - Flag = 0
O3#, O4 - Flag = FZ#
O3, O4 - Flag = FC#

N - high only for SUB, SBC and CMP
OR - high only for OR
AND - high only for AND

C - high for AND, low for OR, XOR...

CS# - low for AND, INC (anything else?)
CR - high for OR, XOR, CS# becomes don't care.

Cin - force high for AND, SUB, CMP, INC
 - force low for ADD, DEC, OR, XOR

INC - AR# low
DEC - AS high,

straight though:
Either ADD, OR, XOR with A=0, [CR don't care for ADD].
Or AND with A=255.

BV - if B not coming from memory or I/O port.

Write reg:

 01xxxxxx except 01110xxx (cmp)
 1xxxxxxx except 111xxxxx
 also IN (some 111xxxxx).

C is written by 01xxxxxx
Z is written by everything that writes a reg except move (110xxxxxx)

Load mem (many don't care):

01xxx1xx
1xxxx1xx except some 111xx1xx

IN is a do care (we want the bus...)
